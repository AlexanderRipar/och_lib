#include "och_time.h"

#include "och_fmt.h"
#include <Windows.h>

namespace och
{
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
	/*//////////////////////////////////////////////////////internals////////////////////////////////////////////////////////*/
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

	struct time_data_t
	{
		const int64_t tz_bias;
		const uint64_t highres_clock_ticks_per_second;

		int64_t query_tz_bias() const noexcept
		{
			DYNAMIC_TIME_ZONE_INFORMATION tz;

			GetDynamicTimeZoneInformation(&tz);

			return tz.Bias * 600000000llu;
		}

		uint64_t query_highres_clock_ticks_per_second() const noexcept
		{
			uint64_t freq = 1;

			QueryPerformanceFrequency(reinterpret_cast<LARGE_INTEGER*>(&freq));

			return freq;
		}

		time_data_t() : tz_bias{ query_tz_bias() }, highres_clock_ticks_per_second{ query_highres_clock_ticks_per_second() } {}
	};

	time_data_t time_data;

	timespan timezone_bias() noexcept { return{ time_data.tz_bias }; }



	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
	/*////////////////////////////////////////////////////////time///////////////////////////////////////////////////////////*/
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

	time::time(const date& date) noexcept
	{
		SystemTimeToFileTime(reinterpret_cast<const SYSTEMTIME*>(&date), reinterpret_cast<FILETIME*>(this));
	}

	time time::now() noexcept
	{
		time t;

		GetSystemTimeAsFileTime(reinterpret_cast<FILETIME*>(&t));

		return t;
	}



	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
	/*////////////////////////////////////////////////////////date///////////////////////////////////////////////////////////*/
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

	date::date(uint16_t year, uint16_t month, uint16_t weekday, uint16_t monthday, uint16_t hour, uint16_t minute, uint16_t second, uint16_t millisecond) noexcept
		: year{ year }, month{ month }, weekday{ weekday }, monthday{ monthday }, hour{ hour }, minute{ minute }, second{ second }, millisecond{ millisecond } {}

	date::date(time t) noexcept
	{
		FileTimeToSystemTime(reinterpret_cast<FILETIME*>(&t), reinterpret_cast<SYSTEMTIME*>(this));
	}

	date date::utc_now() noexcept
	{
		date date;

		GetSystemTime(reinterpret_cast<SYSTEMTIME*>(&date));

		return date;
	}

	date date::local_now() noexcept
	{
		date date;

		GetLocalTime(reinterpret_cast<SYSTEMTIME*>(&date));

		return date;
	}



	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
	/*////////////////////////////////////////////////////highres_time///////////////////////////////////////////////////////*/
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

	highres_time highres_time::now() noexcept
	{
		highres_time t;

		QueryPerformanceCounter(reinterpret_cast<LARGE_INTEGER*>(&t));

		return t;
	}

	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
	/*//////////////////////////////////////////////////highres_timespan/////////////////////////////////////////////////////*/
	/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

	uint64_t highres_timespan::nanoseconds() const noexcept
	{
		return val * 1000'000'000 / time_data.highres_clock_ticks_per_second;
	}

	uint64_t highres_timespan::microseconds() const noexcept
	{
		return val * 1000'000 / time_data.highres_clock_ticks_per_second;
	}

	uint64_t highres_timespan::milliseconds() const noexcept
	{
		return val * 1000 / time_data.highres_clock_ticks_per_second;
	}

	uint64_t highres_timespan::seconds() const noexcept
	{
		return val / time_data.highres_clock_ticks_per_second;
	}
}
